// Generated by CoffeeScript 1.6.1
(function() {
  var byday, exec, exif, fs, p, picdir_list, root, spawn, walk, _, _ref;

  _ref = require("child_process"), spawn = _ref.spawn, exec = _ref.exec;

  exif = function(path, fn) {
    var err, et, hasErr, res;
    et = spawn("vendor\\bin\\exiftool.exe ", ["-j", "-sort", path]);
    res = "";
    err = "";
    hasErr = false;
    et.stdout.on("data", function(data) {
      return res += data;
    });
    et.stderr.on("data", function(data) {
      err += data;
      return hasErr = true;
    });
    return et.on("exit", function(code) {
      var json;
      if (hasErr && code !== 0) {
        if (err.length === 0) {
          err = "Exiftool exited with code: " + code;
        }
        return fn(new Error(err));
      } else {
        try {
          json = res.toString();
          return fn(null, JSON.parse(json));
        } catch (error) {
          return fn(null, "");
        }
      }
    });
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.exif = exif;

  _ = require("underscore");

  fs = require("fs");

  walk = function(dir, done) {
    var results;
    results = [];
    return fs.readdir(dir, function(err, list) {
      var i, next;
      if (err) {
        return done(err);
      }
      i = 0;
      return (next = function() {
        var file;
        file = list[i++];
        if (!file) {
          return done(null, results);
        }
        file = dir + "/" + file;
        return fs.stat(file, function(err, stat) {
          if (stat && stat.isDirectory()) {
            results.push(file);
            return next();
          } else {
            results.push(file);
            return next();
          }
        });
      })();
    });
  };

  picdir_list = function(path, fn) {
    var picHTML;
    picHTML = function(fl) {
      var stats;
      stats = fs.lstatSync(fl);
      if (stats.isDirectory()) {
        return "<div><a class='dir' data-dir='" + fl + "'><img src='vendor/img/folder.png' height='50' />" + fl + "</a></div>";
      } else {
        if (['jpg', 'JPG', 'png'].indexOf(fl.split('.')[1]) > -1) {
          return "<div><img class='image' id='" + (encodeURIComponent(fl)) + "' src='" + fl + "' /></div>";
        } else {
          return "";
        }
      }
    };
    return walk(path, function(err, results) {
      if (err) {
        throw err;
      }
      return fn(_.reduce(results, (function(memo, fl) {
        return memo + picHTML(fl);
      }), ""));
    });
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.picdir_list = picdir_list;

  fs = require("fs");

  p = console.log;

  byday = function(path) {
    return exif(path, function(err, data) {
      return _.each(data, function(pic) {
        var date, dte, fl, _fl;
        fl = pic['SourceFile'];
        date = pic['DateTimeOriginal'] || pic['FileModifyDate'];
        dte = path + '/' + date.split(' ')[0].replace(/:/g, "-");
        fs.stat(dte, function(err, stat) {
          if (!stat) {
            return fs.mkdir(dte);
          }
        });
        _fl = fl.split("/");
        return fs.rename(fl, dte + "/" + _fl[_fl.length - 1]);
      });
    });
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.byday = byday;

}).call(this);
